#!/usr/bin/env tsx

/**
 * Generate TypeScript types from schema sources - PURE GENERATION ONLY
 *
 * This script generates types from:
 * 1. NimbleTools server schema (which extends MCP server schema)
 * 2. MCP Registry OpenAPI spec (optional, for reference)
 *
 * No hard-coded types - everything is generated from schemas
 */

import { compile } from 'json-schema-to-typescript';
import { writeFile, mkdir, readFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { existsSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function generateServerTypes() {
  console.log('üîß Generating types from NimbleTools server schema...\n');

  // Path to our schema
  const schemaPath = join(__dirname, '..', 'schemas', '2025-09-22', 'nimbletools-server.schema.json');

  console.log('üì• Processing nimbletools-server.schema.json...');

  // Read our schema
  const schemaText = await readFile(schemaPath, 'utf-8');
  const schema = JSON.parse(schemaText);

  // Fetch the MCP schema that our schema extends
  console.log('üì• Fetching MCP base schema to resolve references...');
  const mcpResponse = await fetch('https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json');
  if (!mcpResponse.ok) {
    throw new Error(`Failed to fetch MCP schema: ${mcpResponse.status}`);
  }
  const mcpSchema = JSON.parse(await mcpResponse.text());

  // The MCP ServerDetail extends Server, so we need to get Server's properties
  const mcpServerProps = mcpSchema.definitions?.Server?.properties || {};
  const mcpServerRequired = mcpSchema.definitions?.Server?.required || [];

  // Get any additional properties from ServerDetail's allOf
  const serverDetailAllOf = mcpSchema.definitions?.ServerDetail?.allOf || [];
  let additionalProps = {};
  for (const item of serverDetailAllOf) {
    if (item.properties) {
      additionalProps = { ...additionalProps, ...item.properties };
    }
  }

  // Create a merged schema that includes both MCP base and our extensions
  const mergedSchema = {
    ...schema,
    // Remove the allOf and merge the properties directly
    allOf: undefined,
    properties: {
      ...mcpServerProps,
      ...additionalProps,
      ...(schema.allOf?.[1]?.properties || {})
    },
    required: mcpServerRequired,
    definitions: {
      ...mcpSchema.definitions,
      ...schema.definitions
    }
  };

  // Generate TypeScript types from our merged schema
  const compiledTypes = await compile(mergedSchema, 'NimbleToolsMCPServer', {
    additionalProperties: false,
    bannerComment: `/**
 * Auto-generated TypeScript types from NimbleTools Server Schema
 * DO NOT EDIT THIS FILE - Generated from schemas/2025-09-22/nimbletools-server.schema.json
 * Generated at: ${new Date().toISOString()}
 */`,
    declareExternallyReferenced: true,
    enableConstEnums: true,
    format: true,
    ignoreMinAndMaxItems: false,
    strictIndexSignatures: false,
    style: {
      bracketSpacing: true,
      printWidth: 120,
      semi: true,
      singleQuote: true,
      tabWidth: 2,
      trailingComma: 'none',
      useTabs: false
    },
    unknownAny: false,
    unreachableDefinitions: false
  });

  return compiledTypes;
}

async function main() {
  try {
    // Ensure the types directory exists
    const typesDir = join(__dirname, '..', 'src', 'types');
    if (!existsSync(typesDir)) {
      await mkdir(typesDir, { recursive: true });
    }

    // Generate server types
    const serverTypes = await generateServerTypes();

    // Write ONLY the generated types
    const outputPath = join(typesDir, 'generated.ts');
    await writeFile(outputPath, serverTypes);

    console.log(`‚úÖ Generated ${outputPath}`);
    console.log('‚ú® Pure type generation complete!');
    console.log('\nNote: Any additional types needed by your application should be defined in separate files in src/types/');

  } catch (error) {
    console.error('‚ùå Error generating types:', error);
    process.exit(1);
  }
}

main();