name: PR Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  required-checks:
    name: Required PR Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate types
        run: npm run generate-types

      - name: Type check
        run: npm run typecheck

      - name: Run tests
        run: npm run test:run

      - name: Build project
        run: npm run build

      - name: Validate server definitions
        run: npm run validate-servers

      - name: Check for file changes
        run: |
          # Check if any generated files were modified
          if [[ -n $(git diff --name-only src/types/generated.ts) ]]; then
            echo "ERROR: Generated types are out of sync!"
            echo "Please run 'npm run generate-types' and commit the changes."
            git diff src/types/generated.ts
            exit 1
          fi

      - name: Report status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const checks = {
              'Type Check': '${{ steps.typecheck.outcome }}',
              'Tests': '${{ steps.tests.outcome }}',
              'Build': '${{ steps.build.outcome }}',
              'Server Validation': '${{ steps.validate.outcome }}'
            };

            const checksList = Object.entries(checks)
              .map(([name, status]) => `- ${name}: ${status === 'success' ? '✅' : '❌'}`)
              .join('\n');

            const message = `## PR Gate Status: ${status === 'success' ? '✅ Passed' : '❌ Failed'}\n\n${checksList}`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('PR Gate Status')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --production --audit-level=high

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified